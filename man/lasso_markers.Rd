% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lasso_markers.R
\name{lasso_markers}
\alias{lasso_markers}
\title{Find marker genes with spatial coordinates}
\usage{
lasso_markers(
    gene_mt,
    cluster_mt,
    sample_names,
    keep_positive = TRUE,
    coef_cutoff = 0.05,
    background = NULL,
    n_fold = 10
)
}
\arguments{
\item{gene_mt}{A matrix contains the transcript count in each grid.
Each row refers to a grid, and each column refers to a gene.
The column names must be specified and refer to the genes. This can be the
output from the function \code{\link{get_vectors}}.}

\item{cluster_mt}{A matrix contains the number of cells in a specific
cluster in each grid. Each row refers to a grid, and each column refers
to a cluster. The column names must be specified and refer to the clusters.
Please do not assign integers as column names.
This can be the output from the function \code{\link{get_vectors}}.}

\item{sample_names}{A vector specifying the names for the replicates.}

\item{keep_positive}{A logical flag indicating whether to return positively
correlated clusters or not.}

\item{coef_cutoff}{A positive number giving the coefficient cutoff value.
Genes whose top cluster showing a coefficient vlaue smaller than the cutoff
will be . Default is 0.05.}

\item{background}{Optional. A matrix providing the
background information. Each row refers to a grid, and each column refers to
one category of background information. Number of rows must equal to the
number of rows in \code{gene_mt} and \code{cluster_mt}.
Can be obtained by only providing coordinates matrices \code{cluster_info}.
to function \code{get_vectors}.}

\item{n_fold}{Optional. A positive number giving the number of folds used
for cross validation. This parameter will pass to \code{\link{cv.glmnet}}
to calculate a penalty term for every gene.}
}
\value{
a list of two matrices with the following components
\item{\code{lasso_top_result}  }{A matrix with detailed information for
each gene and the most relevant cluster label.
\itemize{\item{\code{gene}}{ Gene name}
\item{\code{top_cluster}} {The name of the most revelant cluster
after thresholding the coefficients. }
\item{\code{glm_coef}}{ The coefficient of the selected cluster in the
generalised linear model.}
\item{\code{pearson}}{ Pearson correlation between the gene vector and the
selected cluster vector. }
\item{\code{max_gg_corr}}{ A number showing the maximum pearson correlation
for this gene vector and all other gene vectors in the input \code{gene_mt}}
\item{\code{max_gc_corr}}{ A number showing the maximum pearson correlation
for this gene vector and every cluster vectors in the input
\code{cluster_mt}}
}

}
\item{\code{lasso_full_result}  }{A matrix with detailed information for
each gene and the most relevant cluster label.

\itemize{\item{\code{gene}}{ Gene name}
\item{\code{cluster}} {The name of the significant cluster after }
\item{\code{glm_coef}}{ The coefficient of the selected cluster
in the generalised linear model.}
\item{\code{pearson}}{ Pearson correlation between the gene vector and the
selected cluster vector. }
\item{\code{max_gg_corr}}{ A number showing the maximum pearson correlation
for this gene vector and all other gene vectors in the input \code{gene_mt}}
\item{\code{max_gc_corr}}{ A number showing the maximum pearson correlation
for this gene vector and every cluster vectors in the input
\code{cluster_mt}}
}}
}
\description{
This function will find the most spatially relevant cluster label
for each gene.
}
\details{
This function will take the converted gene and cluster vectors from function
\code{\link{get_vectors}}, and return the most relevant cluster label for
each gene. If there are multiple replicates in the dataset, this function
will find shared markers across different replicates by including additional
sample vectors in the input \code{cluster_mt}.

This function treats all input cluster vectors as features, and create
a penalized linear model for one gene vector with lasso regularization.
Clusters with non-zero coefficient will be selected, and these clusters will
be used to formulate a generalised linear model for this gene vector.

\itemize{\item{If the input \code{keep_positive} is TRUE, }{the clusters
with positive coefficient and significant p-value will be saved in the
output matrix \code{lasso_full_result}. The cluster with a
positive coefficient and the minimum p-value will be regarded as the most
relevant cluster to this gene and be saved in the output matrix
\code{lasso_result}.}

\item{If the input \code{keep_positive} is FALSE, }{the clusters with
negative coefficient and significant p-value will be saved in the
output matrix \code{lasso_full_result}. The cluster with a negative
coefficient and the minimum p-value will be regarded as the most relevant
cluster to this gene and be saved in the output matrix \code{lasso_result}.}
}

If there is no clusters with significant p-value, the a string "NoSig" will
be returned for this gene.

The parameter \code{background} can be used to capture unwanted noise
pattern in the dataset. For example, we can include negative control
genes as a background cluster in the model. If the most relevant cluster
selected by one gene matches the background "clusters",
we will return "NoSig" for this gene.
}
\examples{

set.seed(100)
#  simulate coordiantes for clusters
df_clA = data.frame(x_centroid = rnorm(n=100, mean=20, sd=5),
                 y_centroid = rnorm(n=100, mean=20, sd=5), cluster="A")
df_clB = data.frame(x_centroid = rnorm(n=100, mean=100, sd=5),
                y_centroid = rnorm(n=100, mean=100, sd=5), cluster="B")

clusters = rbind(df_clA, df_clB)
clusters$rep="rep1"

# simulate coordiantes for genes
trans_info = data.frame(rbind(cbind(x_location = rnorm(n=100, mean=20,sd=5),
                                y_location = rnorm(n=100, mean=20, sd=5),
                                 feature_name="gene_A1"),
                           cbind(x_location = rnorm(n=100, mean=20, sd=5),
                                 y_location = rnorm(n=100, mean=20, sd=5),
                                 feature_name="gene_A2"),
                           cbind(x_location = rnorm(n=100, mean=100, sd=5),
                                 y_location = rnorm(n=100, mean=100, sd=5),
                                 feature_name="gene_B1"),
                           cbind(x_location = rnorm(n=100, mean=100, sd=5),
                                 y_location = rnorm(n=100, mean=100, sd=5),
                                 feature_name="gene_B2")))
trans_info$x_location=as.numeric(trans_info$x_location)
trans_info$y_location=as.numeric(trans_info$y_location)
w_x =  c(min(floor(min(trans_info$x_location)),
         floor(min(clusters$x_centroid))),
      max(ceiling(max(trans_info$x_location)),
          ceiling(max(clusters$x_centroid))))
w_y =  c(min(floor(min(trans_info$y_location)),
          floor(min(clusters$y_centroid))),
      max(ceiling(max(trans_info$y_location)),
          ceiling(max(clusters$y_centroid))))
data = list(trans_info = trans_info)
vecs_lst = get_vectors(data_lst=list(rep1=data), cluster_info = clusters,
                    bin_type = "square",
                    bin_param = c(20,20),
                    all_genes =c("gene_A1","gene_A2","gene_B1","gene_B2"),
                    w_x = w_x, w_y=w_y)
lasso_res = lasso_markers(gene_mt=vecs_lst$gene_mt,
                        cluster_mt = vecs_lst$cluster_mt,
                        sample_names=c("rep1"),
                        keep_positive=TRUE,
                        coef_cutoff=0.05,
                        background=NULL)


}
\seealso{
\code{\link{get_vectors}}
}
