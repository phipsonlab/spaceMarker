% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_permp.R
\name{compute_permp}
\alias{compute_permp}
\title{Calculate a p-value for correlation with permutation.}
\usage{
compute_permp(
    data,
    cluster_info,
    perm.size,
    bin_type,
    bin_param,
    all_genes,
    correlation_method = "pearson",
    n.cores = 1,
    correction_method = "BH",
    w_x,
    w_y
)
}
\arguments{
\item{data}{A list of matrices containing the coordinates of transcripts.
This can be the output from the function \code{\link{get_data}}.}

\item{cluster_info}{A dataframe/matrix containing the centroid coordinates and
cluster label for each cell.The column names should include "x" (x coordinate),
"y" (y coordinate), and "cluster" (cluster label).}

\item{perm.size}{A positive number specifying permutation times}

\item{bin_type}{A string indicating which bin shape is to be used for
vectorization. One of "square" (default), "rectangle", or "hexagon".}

\item{bin_param}{A numeric vector indicating the size of the bin. If the
\code{bin_type} is "square" or "rectangle", this will be a vector of length
two giving the numbers of rectangular quadrats in the x and y directions. If
the \code{bin_type} is "hexagonal", this will be a number giving the side
length of hexagons. Positive numbers only.}

\item{all_genes}{A vector of strings giving the name of the genes you want to
test correlation for.
\code{gene_mt}.}

\item{correlation_method}{A parameter pass to \code{\link{cor}} indicating
which correlation coefficient is to be computed.
One of "pearson" (default), "kendall", or "spearman": can be abbreviated.}

\item{n.cores}{A positive number specifying number of cores used for
parallelizing permutation testing. Default is one core
(sequential processing).}

\item{correction_method}{A character string pass to \code{\link{p.adjust}}
specifying the correction method for multiple testing .}

\item{w_x}{a numeric vector of length two specifying the x coordinate
limits of enclosing box.}

\item{w_y}{a numeric vector of length two specifying the y coordinate
limits of enclosing box.}
}
\value{
A named list with the following components
\item{\code{obs.stat}  }{ A matrix contains the observation statistic for
every gene and every cluster. Each row refers to a gene, and each column
refers to a cluster}
\item{\code{perm.arrays}  }{ A three dimensional array.
The first two dimensions represent the correlation between the genes and
permuted clusters. The third dimension refers to the different permutation
runs. }
\item{\code{perm.pval}  }{A matrix contains the raw permutation p-value.
Each row refers to a gene, and each column refers to a cluster}
\item{\code{perm.pval.adj}  }{A matrix contains the adjusted permutation
p-value. Each row refers to a gene, and each column refers to a cluster}
}
\description{
This function will run permutation framework to compute a p-value for the
correlation between the vectorised genes and clusters each cluster.
}
\details{
To get a permutation p-value for the correlation between a gene and a cluster,
this function will permute the cluster label for each cell randomly,
and calculate correlation between the genes and permuted clusters.
This process will be repeated for \code{perm.size} times,
and permutation p-value is calculated as the probability of permuted
correlations larger than the observation correlation.
}
\examples{

set.seed(100)
# simulate coordiantes for clusters
df_clA = data.frame(x_centroid = rnorm(n=100, mean=20, sd=5),
                    y_centroid = rnorm(n=100, mean=20, sd=5), cluster="A")
df_clB = data.frame(x_centroid = rnorm(n=100, mean=100, sd=5),
                    y_centroid = rnorm(n=100, mean=100, sd=5), cluster="B")
clusters = rbind(df_clA, df_clB)
clusters$rep="rep1"
# simulate coordiantes for genes
trans_info = data.frame(rbind(cbind(x_location = rnorm(n=100, mean=20, sd=5),
                                    y_location = rnorm(n=100, mean=20, sd=5),
                                feature_name="gene_A1"),
                            cbind(x_location = rnorm(n=100, mean=20, sd=5),
                                y_location = rnorm(n=100, mean=20, sd=5),
                                feature_name="gene_A2"),
                            cbind(x_location = rnorm(n=100, mean=100, sd=5),
                                y_location = rnorm(n=100, mean=100, sd=5),
                                feature_name="gene_B1"),
                            cbind(x_location = rnorm(n=100, mean=100, sd=5),
                                y_location = rnorm(n=100, mean=100, sd=5),
                                feature_name="gene_B2")))
trans_info$x_location=as.numeric(trans_info$x_location)
trans_info$y_location=as.numeric(trans_info$y_location)
w_x =  c(min(floor(min(trans_info$x_location)),
            floor(min(clusters$x_centroid))),
        max(ceiling(max(trans_info$x_location)),
            ceiling(max(clusters$x_centroid))))
w_y =  c(min(floor(min(trans_info$y_location)),
            floor(min(clusters$y_centroid))),
        max(ceiling(max(trans_info$y_location)),
            ceiling(max(clusters$y_centroid))))
rep1 = list(trans_info = trans_info)
perm_res_lst = compute_permp(data=rep1,
                    cluster_info=clusters,
                    perm.size=100,
                    bin_type="square",
                    bin_param=c(2,2),
                    all_genes=unique(trans_info$feature_name),
                    correlation_method = "pearson",
                    n.cores=2,
                    correction_method="BH",
                    w_x=w_x ,
                    w_y=w_y)
perm_pvalue = perm_res_lst$perm.pval.adj
}
